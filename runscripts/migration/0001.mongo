// Script to clean up roles from the previous version.
// Remove roles that are no longer needed.
// Move some of the instrument specific hacks to instrument specific roles.

// These roles are no longer needed.
// ExperimentInfo is still used by the questionnaire; we'll add that back in with proper players once the Questionnaire is migrated.
db.getSiblingDB("site").roles.deleteMany({"app": {"$in": ["BeamTimeMonitor", "ExperimentInfo", "icws", "irodsws", "irodsws3", "Logger", "RegDB", "RoleDB", "ShiftMgr", "StoragePolicyMgr"]}})

db.getSiblingDB("site").roles.replaceOne({ "app" : "LogBook", "name" : "LabPersonnel"},
         { "app" : "LogBook", "name" : "LabPersonnel",
           "privileges" : [ "read", "post", "edit", "delete", "manage_groups", "feedback_read", "feedback_write", "switch", "ops_page", "experiment_create", "experiment_edit", "instrument_create" ],
           "players" : [ "uid:mshankar", "uid:wilko", "uid:cpo", "uid:perazzo"]}, {upsert: true});

let siteadmin_privileges = db.getSiblingDB("site").roles.findOne({ "app" : "LogBook", "name" : "LabPersonnel"})["privileges"];
siteadmin_privileges.push('experiment_delete');
db.getSiblingDB("site").roles.replaceOne({ "app" : "LogBook", "name" : "SiteAdmin"},
        { "app" : "LogBook", "name" : "SiteAdmin",
          "privileges" : siteadmin_privileges,
          "players" : [ "uid:mshankar", "uid:wilko", "uid:cpo", "uid:perazzo"]}, {upsert: true});

// For Cryo, we'll create another role that has no access to the ops page but has the abiility to create/edit experiments and switch their own experiment.
db.getSiblingDB("site").roles.insertOne({"app" : "LogBook", "name" : "PowerUsers",
  "privileges" : [ "switch", "experiment_create", "experiment_edit" ]
})

// In addition, we'll create a POC role for LCLS. POC's can do everything a LabPersonnel can do but they cannot create/edit experiments and instruments.
db.getSiblingDB("site").roles.insertOne({"app" : "LogBook", "name" : "POC",
  "privileges" : [ "read", "post", "edit", "delete", "manage_groups", "feedback_read", "feedback_write", "switch", "ops_page" ],
})

// Finally a role for folks who can switch the current experiment from the ops page.
db.getSiblingDB("site").roles.insertOne({"app" : "LogBook", "name" : "DAQOperators",
  "privileges" : [ "switch", "ops_page" ],
})


// Move the instrument specific roles to the instrument.
let nms = [ "Manage_AMO", "Manage_CXI", "Manage_DET", "Manage_MEC", "Manage_MFX", "Manage_SXR", "Manage_XCS", "Manage_XPP", "Manage_MISSING"];
let nm;
for (nm of nms) {
  let expswitch = db.getSiblingDB("site").roles.findOne({"app": "ExperimentSwitch", "name": nm}),
      insname = nm.replace("Manage_", ""),
      ins = db.getSiblingDB("site").instruments.findOne({"_id": insname});
  if( expswitch != null) {
    print("Moving instrument specific experiment switch players for instrument" + insname);
    db.getSiblingDB("site").instruments.updateOne({"_id": insname}, {"$push": {"roles": { "app" : "LogBook", "name": "POC", "players": expswitch["players"] }}});
    for (pl of expswitch["players"]) {
        if (!pl.includes("uid:")) {
            db.getSiblingDB("site").roles.updateOne({"app" : "LogBook", "name" : "DAQOperators"}, {"$addToSet": {"players": pl}});
            db.getSiblingDB("site").roles.updateOne({"app" : "LogBook", "name" : "Writer"}, {"$addToSet": {"players": pl}});
        }
     }
   }
   db.getSiblingDB("site").roles.deleteOne({"app": "ExperimentSwitch", "name": nm});
}

// Remove the manage_shifts privilege. This used to be a big deal in the past; may come back again.
// We'll add it back then.
db.getSiblingDB("site").roles.updateMany({"app": "LogBook"}, {"$pull": {"privileges": "manage_shifts"}})

// Move the LDAP/Admin to LogBook/Manager
db.getSiblingDB("site").roles.updateOne({"app": "LDAP", "name": "Admin"}, {"$set": {"app": "LogBook", "name": "Manager"}})
db.getSiblingDB("site").roles.updateOne({"app": "LogBook", "name": "Admin"}, {"$set": {"app": "LogBook", "name": "Manager"}})
db.getSiblingDB("site").roles.updateOne({"app": "LogBook", "name": "Admin"}, {"$addToSet": {"privileges": {"$each": ["read", "post", "edit", "delete", "manage_groups"]}}})
// We also need to do this in all the experiment databases.
var mongo = db.getMongo();
mongo.getDBNames().forEach(function (dbname) {
 var db = mongo.getDB(dbname);
 if (db.getCollectionNames().includes('roles')) {
     db.roles.updateOne({"app": "LDAP", "name": "Admin"}, {"$set": {"app": "LogBook", "name": "Manager"}})
     db.roles.updateOne({"app": "LogBook", "name": "Admin"}, {"$set": {"app": "LogBook", "name": "Manager"}})
 }
});

mongo.getDBNames().forEach(function (dbname) {
 var db = mongo.getDB(dbname);
 if (db.getCollectionNames().includes('file_catalog')) {
     db.file_catalog.createIndex({"run_num": -1})
 }
});
